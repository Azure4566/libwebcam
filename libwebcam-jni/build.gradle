apply plugin: 'java'

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenLocal()
    mavenCentral()

    maven {
        url = "https://oss.sonatype.org/content/repositories/snapshots/"
    }
}


dependencies {
    ['core','swing'].each { String a->
        compile('org.boofcv:boofcv-'+a+':0.30')
    }

    testCompile group: 'junit', name: 'junit', version: '4.12'
}

tasks.withType(Test) {
    systemProperty "java.library.path", file("../build/jni")
}

test {
    ignoreFailures true
    reports.html.enabled = false

    testLogging {
        showStandardStreams = true
    }
}

task javadocJar(type: Jar) {
    classifier = 'javadoc'
    from javadoc
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

// Get the location of the native code
if( project.hasProperty("native_build_location")) {
    ext.build_location = project.property("native_build_location")
} else {
    ext.build_location = "../build"
}
if( !file("$ext.build_location").exists() ) {
    throw new GradleException("Native build directory $ext.build_location does not exist!")
}

// Determine which architecture it is being bult on so that it knows what to name the classifier as.
String osName = org.gradle.internal.os.OperatingSystem.current().getName()
String osVersion = org.gradle.internal.os.OperatingSystem.current().getVersion()
String jvmBits = System.getProperty("sun.arch.data.model")
String cpuType = "x86" // not sure how to detect x86 vs arm
println "  Platform:        $osName $osVersion $jvmBits-bits"

// yes it assumes x86. Not sure
if (org.gradle.internal.os.OperatingSystem.current().isLinux()) {
    ext.platform = "linux-${cpuType}_$jvmBits"
} else if (org.gradle.internal.os.OperatingSystem.current().isUnix()) {
    ext.platform = "unix-${cpuType}_$jvmBits"
} else if (org.gradle.internal.os.OperatingSystem.current().isWindows()) {
    ext.platform = "windows-${cpuType}_$jvmBits"
} else if (org.gradle.internal.os.OperatingSystem.current().isMacOsX()) {
    ext.platform = "macos-${cpuType}_$jvmBits"
} else {
    ext.platform = "unknown_${cpuType}_$jvmBits"
}

println "  Classifier name: $project.ext.platform"
println "  Native location: $project.ext.build_location"
task nativeJar(type: Jar) {
    classifier "$project.ext.platform"
    from file("$project.ext.build_location/libwebcam-jni/")
    include 'libwebcamjni.*'
}

artifacts {
    archives sourcesJar
//        archives javadocJar

    archives(nativeJar.archivePath) {
        type "jar"
        builtBy nativeJar
    }
}